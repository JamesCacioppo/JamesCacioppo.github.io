[{"body":"Configuration Git configuration location There are three places where configuration is stored:\n System: [path]/etc/gitconfig Global: ~/.gitconfig or /.config/git/config Local: [repo]/.git/config  When using the git config command you can pass --system, --global, or --local to specify which configuration you’d like to modify. The list above is in order of precedence from lowest to highest. Values in the local config will override values in global and system. Values in global will override values in system.\nTo show all configurations and their source execute git config --list --show-origin\nHow to use git-config To see the man page, which is really good for this command, execute man git-config. The “name” of the option to affect is the section and key separated by a period (e.g. alias.br).\nThere are several options query/set/replace/unset.\nTo create git config alias.br 'branch -a' To unset git config --unset alias.br\nRequired configurations In order to commit in a repo you’ll need to ensure that two values are set at some configuration level:\n Email: git config --global user.name \"[User Name]\" Username: git config --global user.email \"james.m.cacioppo@gmail.com\"  Aliases A very useful configuration is an alias. It allows you to create a short alias for a long command. Another benefit is having an alias is like having notes you can look up when you forget a seldom used command.\nTo create an alias git config --global alias.[alias name] [command]\nAn example would be to set git br to git branch -a\n$ git config --global alias.br 'branch -a' ","categories":["Git"],"description":"How to configure git.\n","excerpt":"How to configure git.\n","ref":"/docs/git/commits/","tags":["git","git-commit","docs"],"title":"Git Commits"},{"body":"The first thing to understand about Git is it’s a distributed Source Control Manager (SCM). This means that the repository isn’t stored in a central location. It’s stored on every developer’s computer. When it was first created this was how it was used. We now have a feature called a remote that has become ubiquitous. A remote is commonly a Git server which can store your repository in a central place for all developers on your team to access. The first step in working with Git is almost always cloning.\nClone a repo Cloning a repo is the act of downloading a copy of the repo to your local machine so you can work on it. The git clone command will create a new sub directory within your present working directory and clone the repo to it. To clone a repo using the HTTPS protocol:\n$ git clone https://github.com/JamesCacioppo/git-zero-to-hero-demo.git To clone a repo using SSH:\n$ git clone git@github.com:JamesCacioppo/git-zero-to-hero-demo.git Remotes Branching When you first clone a repo you’ll be in the default branch. This was historically called master and is now often named main. Most organizations use a branching strategy which usually involves creating a branch, committing changes to the branch, and then merging that branch back into main.\nCreating Branches The formal way to create a branch is with the git-branch command:\n$ git branch [branch name] However, the previous command does not place you on that branch and you’d still need to use the git-checkout command to switch branches. To create a branch and switch to it in one command use git-checkout:\n$ git checkout -b [branchname] At this point your local repo is tracking the new branch but the remote is not. To update the remote:\n$ git push --set-upstream origin [branchname] Useful Branching Commands To list local branches git branch To list branches locally and remotely git branch -a To rename the current branch git branch -m [branch name] To checkout a branch use git checkout [branch name]\nDeleting Branches When it comes time to delete a branch there are a few things to note.\n Deleting a branch locally is different from deleting a branch on the remote. There are two ways to remove a branch locally listed below.  The “safe” way will only remove the branch if its changes have been merged into main while the “forcefull” method will remove the branch regardless of its status.   You cannot remove a branch if you have it checked out. When you delete a remote branch your local repo does not know and will need to be updated. To do this you must remove the branch refs.  To safely remove a local branch use git branch -d [branch name] To forcefully remove a local branch use git branch -D [branch name] To remove a remote branch use git push origin --delete [branch name] To remove deleted branch refs use git remote prune origin\nBranching Strategies When a team is using Git, some sort of workflow or branching strategy is required for the team to develop effectively. Junior developers need an understanding of various common strategies so they can onboard quickly to various teams and projects. Intermediate and senior developers will need a more in-depth understanding of the common strategies, their variants, benefits and drawbacks of each, and when to choose one strategy over another. What follows is just a brief introduction into a few common strategies.\nGitflow In 2010, Vincent Driessen documented Gitflow. In a vacuum of well documented and capable strategies, Gitflow became almost ubiquitous in development teams and is still almost required knowledge. While this strategy works well under certain conditions, Gitflow has many drawbacks. In fact, Vincent even updated his post in 2020 explaining that it shouldn’t necessarily be the default or go-to for all dev teams. We’ll discuss some of the pro’s and con’s of Gitflow, but first, let’s take a look at how it works.\nTwo branches live forever. They are develop and master. The develop branch is the branch from which almost all work is done. Developers will create feature branches from develop and merge their work back in.\nDevelopers will also create release branches from develop. The purpose of creating these is to start preparing code for release or production deployment. Once this prep work is complete, release branches will be merged into master.\nBug and hotfix branches will be created from master and when complete they will be merged back into master as well as develop.\nAs you can see, this is a complex strategy which can result in some interesting merge conflicts. It also does not facilitate CI/CD.\nThere are circumstances, however, where releasing and deploying at a high frequency is undesirable or impossible. In these cases, this strategy can be helpful as there’s a natural delay between selecting a release candidate and a push to production. The dedicated release branch allows developers to fix issues with the release candidate while continuing development of the baseline on develop.\nGithub flow Github flow, designed by Github, is meant to provide many of the benefits seen in Gitflow while massively reducing complexity. Their documentation is clear and concise and definitely worth a look.\nIn Github flow, there is only one long lived branch and it’s the main branch. All working branches come from main and merge back into main. This includes branches for features, ops updates, bug and hot fixes, etc. When a commit on master is chosen for release a version tag is applied to it.\nThis strategy is very flexible. Testing can be done at any point. In fact, we’ve found that it’s effective to perform builds, deployments, and testing when a PR is created and on each subsequent commit which changes a PR. Then, we perform the same and more testing when merged back into main, build and push artifacts, and deploy into UAT environments.\nTrunk One of the main issues with many common strategies is the rate of integration. Continuous Integration (CI) means integrating, or merging, code back into the mainline as frequently as possible. In Gitflow, Github flow, and other similar strategies, developers commonly keep feature branches open for days if not entire sprints. What often results is sometimes called “integration hell” or “merge hell” as developers attempt to merge their code, which has become further and further out of date from the mainline as time has passed.\nEnter Trunk Based workflows.\nThe idea is that code is integrated into the mainline as often as every commit and at least once every 24 hours. Small two dev teams who are paired programming may commit directly to master while larger “at scale” teams will need to use feature branches. The key difference here is that feature branches should be very short lived and should be integrated at least once every 24 hours.\nIn order for this to work, thorough testing must be conducted before merging using various methods such as pre-commit hooks and the baseline should be kept in good working condition. If a bug is found in the baseline fixing it should be the priority.\nA great resource is the site at ContinuousDelivery.com. The page on Continuous Integration is especially relevant to this topic.\n","categories":["Git"],"description":"Branching concepts and commands.\n","excerpt":"Branching concepts and commands.\n","ref":"/docs/git/branching/","tags":["git","branching","docs"],"title":"Git Branching"},{"body":"","categories":["Git","Examples"],"description":"Git from zero to hero.  Basic to advanced concepts along with examples and tutorials.\n","excerpt":"Git from zero to hero.  Basic to advanced concepts along with examples …","ref":"/docs/git/","tags":["git","docs"],"title":"Git"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n General Styling This is a normal paragraph following a header.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","categories":["Markdown"],"description":"A complete breakdown of widely accepted Markdown\n","excerpt":"A complete breakdown of widely accepted Markdown\n","ref":"/docs/markdown/","tags":["markdown","sample","docs"],"title":"Markdown"},{"body":"Configuration Git configuration location There are three places where configuration is stored:\n System: [path]/etc/gitconfig Global: ~/.gitconfig or /.config/git/config Local: [repo]/.git/config  When using the git config command you can pass --system, --global, or --local to specify which configuration you’d like to modify. The list above is in order of precedence from lowest to highest. Values in the local config will override values in global and system. Values in global will override values in system.\nTo show all configurations and their source execute git config --list --show-origin\nHow to use git-config To see the man page, which is really good for this command, execute man git-config. The “name” of the option to affect is the section and key separated by a period (e.g. alias.br).\nThere are several options query/set/replace/unset.\nTo create git config alias.br 'branch -a' To unset git config --unset alias.br\nRequired configurations In order to commit in a repo you’ll need to ensure that two values are set at some configuration level:\n Email: git config --global user.name \"[User Name]\" Username: git config --global user.email \"james.m.cacioppo@gmail.com\"  Aliases A very useful configuration is an alias. It allows you to create a short alias for a long command. Another benefit is having an alias is like having notes you can look up when you forget a seldom used command.\nTo create an alias git config --global alias.[alias name] [command]\nAn example would be to set git br to git branch -a\n$ git config --global alias.br 'branch -a' ","categories":["Git"],"description":"How to configure git.\n","excerpt":"How to configure git.\n","ref":"/docs/git/configuration/","tags":["git","git-config","docs"],"title":"Git Configuration"},{"body":" Here you will find the main purpose of this site: documentation, cheat sheets, and tutorials.\n ","categories":"","description":"","excerpt":" Here you will find the main purpose of this site: documentation, …","ref":"/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/branching/","tags":"","title":"branching"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/docs/","tags":"","title":"docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/git/","tags":"","title":"Git"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/git/","tags":"","title":"git"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/git-commit/","tags":"","title":"git-commit"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/git-config/","tags":"","title":"git-config"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/markdown/","tags":"","title":"Markdown"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/markdown/","tags":"","title":"markdown"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/sample/","tags":"","title":"sample"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About James Some things you might want to know about me.        Husband, father, and super nerd.\n    I'm a systems engineer with a long background in industrial control systems (ICS). I spent many years in the oil and gas industry designing, building, deploying, and supporting automation systems for what we called \"downstream\" delivery. This time was a ton of fun because one day I could be hacking away at the Linux based automation servers and the next I could be out in the field dressed in head to toe Nomex testing and fixing electrical system terminations.      I later moved into a DevOps role in the renewable energy sector. This was a dream come true. Not only had I moved into the cutting edge of cloud computing, I could still leverage my ICS background to help accomplish what I still consider to be one of humanities most important missions. It was here that I was finally exposed to concepts such as Infrastructure as Code (IaC), the value of writing IaC in an idempotent and deterministic manner, and the mac daddy of the cloud, Kubernetes.       Today, I have found myself managing a team of the highest performing engineers building software solutions on the bleeding edge of technology.      After work, I'm a family man. I try to spend as much time with my family as possible. I bike, hike, enjoy woodworking, working on cars, and photography. I'm a massive coffee nerd. I love cigars. I hunt, shoot, and fish as time permits.     ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","tags":"","title":"About James"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/blog/","tags":"","title":"Docsy Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/examples/","tags":"","title":"Examples"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu4fe1f5561ffcc006908db5108c0ea99f_801041_960x540_fill_q75_catmullrom_smart1.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu4fe1f5561ffcc006908db5108c0ea99f_801041_1920x1080_fill_q75_catmullrom_smart1.jpg); } }  A Modern Engineer Learn More   My Github   Notes, tutorials, and the thoughts and musings of a modern engineer. Pull a shot, poor some latte art, and let's dig in!\n         The primary purpose of this site is to provide polished versions of my notes and documentation in a way that’s accessible to everyone.\nAn ancillary purpose is to provide myself with a place to express and document everything from my thoughts on branching strategies to cigar and whisky tasting notes.\n      Coffee’s brewing! We’re now pulling shots of LoCo Beans’s Espresso Grande.\n    Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n Read more …\n   Don’t follow me on Twitter! Yeah… I don’t do the tweets.\n     ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"Modern Engineer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"}]